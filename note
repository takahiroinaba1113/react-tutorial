Files and Folders 

package.json
-> contains dependencies and scripts requeried for this project

package-lock.json
-> consistency installation of dependencies 

node_modules
-> where all the dependencies are installed

public 
1. manifest.json
2. favicon.ico
3. index.html
-> only hmtl file for the single page application
-> this is the one that shows up when the app starts

scr
1. index.js
-> ReactDOM.render to render 
2. App.js
-> responsible for HTML to display -> JSX
3. App.css
-> for styling
4. App.test
-> simple test for the app

React 
Components
1. header
2. sidenav
3. main content
4. footer
5. root that nests all other Components
-> basically in .js Files

Component Types
- Stateless funtional Components
-> JavaScript functions that return JSX
- stateful class Component
-> class extends component class that has render() to return JSX

Components summary
- components describe a part of the user interface
- reusable and can be nested inside other components 
- two types: stateless functional components & stategul class components

Functional Components 
- JavaScript function
- receives properties(props) that are attributes of HTML
- return JSX (to generate HTML)

Class components
- ES6 class to return JSX (HTML)
- it can maintain state (information that is private to the class)

Functional vs Class components
Functional
- simple functions
- use function approach to create components if possible
- absence of 'this' keyword
- solution without using state
- mainly responsible for the UI
- stateless/dumb/presentational
-> now it can be stateful!!

Class
- more feature rich
- maintain their own private data - state
- complex UI logic
- provide lifecycle hooks
- stategful/state/container

hooks
- a new feature proposal that lets you use state and other React features in function

JSX
- JavaScript XML (JSX) is extension to JavaScript language syntax
- write XML-like code for elements and components
- JSX tags have a tag name, attributes, and children
- JSX transpiles to pure JavaScript which is understood by browser
- JSX differences compared to HTML

props vs state (both hold information that influence UI)
props
- get passed to the component
- function parameters
- immutable
- 'props' in functional components
- 'this.props' in class components

state 
- managed within the component
- variable declared in the function body
- state can be changed
- useState Hook in functional components
- this.state in class components

setSate
- use it to modify state
- if you want to execute some code after the state has been changed with setState, 
place that code in the argument 'callback' (use callback funciton)
-> it is the second argument to the setState method
- when you have to update state based on the previous state value, 
pass in a function as an argument instead of the regular object

Bind Event Handling
1. bind(this) in rendering
2. arrow function in rendering
3. bind(this) in class constructor
4. arrow function as a class property

Method as props
1. define function in parent 
2. give that function as props to child as the attribute value
3. receive the props in child, and call it by props.methodName
4. in calling the method, pass args to it so that the parent can receive the value
-> this requires arrow syntax
5. use that passed value in the parent function 

Conditional Rendering 
1. if/else 
2. element variable
3. ternary conditional operator
4. short circuit operator

List Rendering
- map(): the method that creates a new array with the result of calling a provided function on every element in the calling array
e.g.
var array1 = [1, 3, 5, 6];
// take each element of array and execute the function specified in the arg (arrow func)
const map1 = array1.map(x => x * 2);
map1 is now expected to be a new array of [2, 6, 10, 12]

Lists and Keys
- list without key attribute
-> React compares lists in parent and child component 
- list with key attribute
-> React compares lists 
- 'key' is a special string attribute you need to include when creating lists of elements
- keys give the elemenet a stable identity
- keys help React identify which items have changed, are added, or are removed
-> in sum, keys help efficient update of the UI

Index as Keys anti-pattern
- items in a list do not have a unique ID 
- the list is a static and will not change
- the list will never be reordered or filtered
-> soring and filtering will mess up the values 

Styling React Components
- CSS 
- inline styling
- CSS node_modules
- CSS in JS library

Controlled Components
when you want to change state according to user input
1. craete JSX (HTML) to display UI and receive input
-> value, onChange attributes are needed to receive the value and trigger setState method
2. add the object in the state in the constructor
3. define handler method that has setState 
-> this handler receives 'event' that contains all info from the event
-> to use the value in event, use event.target.value 
-> set this event.target.value to the object that you want to set the state of

Lifecycle Methods for class components (build-in methods)
1. Mounting:
when an instance of a component is being created 
and iserted into the DOM
-> Methods
constructor(props):
- called whenever a new component is created
- initializing state
- binding the event handlers

static getDerivedStateFromProps(props, state) -> rarely used
- when the state of the component depedens on changes in props over time
- set the state

render ()
- only required method in class component
- read props & state and return JSX

componentDidMount()
- invoked immediately after a component 
and its children components have beeen rendered to the DOM
- cause side effects: e.g. interact with the DOM or perform any ajax calls to load data


2. Updating:
when an component is being re-rendered 
as a result of changes to either its props or state
-> Methods
static getDerivedStateFromProps(props, state)
- called every time a component is re-rendered
- set the state

shouldComponentUpdate(nextProps, nextState)
- dictates if the component should re-render or not
- performance optimization
- return true or false to let React know if it should update component or not

render
- read props & state and return JSX

getSnapshotBeforeUpdate(prevProps, prevState) -> rarely used
- called right before the changes from the virtual DOM are to be reflected in the DOM
- capture some info from the DOM
- return null or a value. returned value will be passed as the third param to the next method

compnentDidUpdate(prevProps, prevState, snapshot)
- called after the render is finished in the re-render cycles
- cause side effects


3. Unmounting:
when a component is being removed from the DOM
-> Method
componentWillUnmount()
- invoked immediately before a component is unmounted and destroyed
- cancelling any network requests, removing event handlers, 
cancelling any subscriptions and also invalidating timers

4. Error Handling:
when there is an error during rendering, 
in a lifecycle method, or in the constructor of any child component
-> Methods
static getDerivedStateFromError(error)
- 

componentDidCatch(error, info)
- 

Fragment
- removing unnecessary <div> tags

Pure Components vs Regular Component
Pure Component:
- implements shouldComponentUpdate with a shallow props and state comparison
-> SC of prevState with currentState
-> SC of prevProps with currentProps
- work only with class component

-> by shallow comparison, it regulates the frequency of re-rendering which could improve efficiency
BUT, unless you see some performance hinderance by regular components, just stick to regular components

Regular Component:
- not implement the shouldComponentUpdate method. it always returns true by default

Shallow comparison
- primitive types
-> if a and b have the same value and are of the same type, return true
- complex types 
-> if a and b reference the exact same object, return true

Memo - function counterpart to pure component of class 

Refs
- a function provided by React to access the DOM element 
and the React element that you might have created on your own
- used in cases where you want to change the value of a child component, without making use of props and all
- two ways to use Refs: React.createRef() & Callback Refs
- forwarding Refs
-> automatically passing ref thru components to one of its children

Portals
- it allows you to render children into any DOM node 
that exits outside the DOM hierachy of the parent component
-> ReactDOM.create(child, container)
the first argument (child) is any renderable React child
the second argument (container) is a DOM element

Error Boundaries
- React components that catch JavaScript errors anywhere in their child component tree,
log those errors, and display a fallback UI instead of the component tree that crashed. 
- catch errors during rendering, in lifecycle methods, 
and in constructors of the whole tree below them
- a class component becomes an Error Boundary by defining either or both of getDerivedStateFromError 
and componentDidCatch lifecycle methods
-> place the component as a parent component so that errors happen inside the child component tree
will now go to the error boundary component

- two methods:
-> static getDerivedStateFromError(error)
- used to render a fallback UI after an error is thrown
-> componentDidCatch(error, info)
- used to log the error information


Higher-Order-Components

Render props

Context

